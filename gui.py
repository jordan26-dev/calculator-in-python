
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, StringVar
from tkinter import ttk


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"E:\Web Developement Course\Python Project 1\build\assets\frame0")



class Calculator:
    def __init__(self):
        self.window = Tk()
        self.window.geometry("286x559")
        self.window.configure(bg = "#242833")
        self.window.resizable(0, 0)
        self.window.title("Calculator")
        
        self.equation = ""
        self.entry_value = ""
        self.hasInput = False
        self.operator = ["+","-","*","/"]
        
        def relative_to_assets(path: str) -> Path:
            return ASSETS_PATH / Path(path)
        
        self.canvas = Canvas(
            self.window,
            bg = "#242833",
            height = 559,
            width = 286,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )
    

        self.canvas.place(x = 0, y = 0)
        self.button_image_1 = PhotoImage(
            file= relative_to_assets("button_1.png"))
        self.button_1 = Button(
            image= self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.show('.'),
            relief="flat"
        )
        self.button_1.place(
            x=0.0,
            y=489.0,
            width=70.0,
            height=70.0
        )

        self.button_image_2 = PhotoImage(
            file= relative_to_assets("button_2.png"))
        self.button_2 = Button(
            image= self.button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.show(0),
            relief="flat"
        )
        self.button_2.place(
            x=72.0,
            y=489.0,
            width=70.0,
            height=70.0
        )

        self.button_image_3 = PhotoImage(
            file= relative_to_assets("button_3.png"))
        self.button_3 = Button(
            image= self.button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.show('%'),
            relief="flat"
        )
        self.button_3.place(
            x=144.0,
            y=489.0,
            width=70.0,
            height=70.0
        )

        self.button_image_4 = PhotoImage(
            file= relative_to_assets("button_4.png"))
        self.button_4 = Button(
            image= self.button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.show(1),
            relief="flat"
        )
        self.button_4.place(
            x=0.0,
            y=417.0,
            width=70.0,
            height=70.0
        )

        self.button_image_5 = PhotoImage(
            file= relative_to_assets("button_5.png"))
        self.button_5 = Button(
            image= self.button_image_5,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.show(2),
            relief="flat"
        )
        self.button_5.place(
            x=72.0,
            y=417.0,
            width=70.0,
            height=70.0
        )

        self.button_image_6 = PhotoImage(
            file= relative_to_assets("button_6.png"))
        self.button_6 = Button(
            image= self.button_image_6,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.show(3),
            relief="flat"
        )
        self.button_6.place(
            x=144.0,
            y=417.0,
            width=70.0,
            height=70.0
        )

        self.button_image_7 = PhotoImage(
            file= relative_to_assets("button_7.png"))
        self.button_7 = Button(
            image= self.button_image_7,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.show(4),
            relief="flat"
        )
        self.button_7.place(
            x=0.0,
            y=347.0,
            width=70.0,
            height=70.0
        )

        self.button_image_8 = PhotoImage(
            file= relative_to_assets("button_8.png"))
        self.button_8 = Button(
            image= self.button_image_8,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.show(6),
            relief="flat"
        )
        self.button_8.place(
            x=144.0,
            y=347.0,
            width=70.0,
            height=70.0
        )

        self.button_image_9 = PhotoImage(
            file= relative_to_assets("button_9.png"))
        self.button_9 = Button(
            image= self.button_image_9,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.solve(),
            relief="flat"
        )
        self.button_9.place(
            x=216.0,
            y=419.0,
            width=70.0,
            height=140.0
        )

        self.button_image_10 = PhotoImage(
            file= relative_to_assets("button_10.png"))
        self.button_10 = Button(
            image= self.button_image_10,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.append_operator('+'),
            relief="flat"
        )
        self.button_10.place(
            x=216.0,
            y=348.0,
            width=70.0,
            height=70.0
        )

        self.button_image_11 = PhotoImage(
            file= relative_to_assets("button_11.png"))
        self.button_11 = Button(
            image= self.button_image_11,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.show(7),
            relief="flat"
        )
        self.button_11.place(
            x=0.0,
            y=277.0,
            width=70.0,
            height=70.0
        )

        self.button_image_12 = PhotoImage(
            file= relative_to_assets("button_12.png"))
        self.button_12 = Button(
            image= self.button_image_12,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.show(8),
            relief="flat"
        )
        self.button_12.place(
            x=72.0,
            y=277.0,
            width=70.0,
            height=70.0
        )

        self.button_image_13 = PhotoImage(
            file= relative_to_assets("button_13.png"))
        self.button_13 = Button(
            image= self.button_image_13,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.show(9),
            relief="flat"
        )
        self.button_13.place(
            x=144.0,
            y=277.0,
            width=70.0,
            height=70.0
        )

        self.button_image_14 = PhotoImage(
            file= relative_to_assets("button_14.png"))
        self.button_14 = Button(
            image= self.button_image_14,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.append_operator('-'),
            relief="flat"
        )
        self.button_14.place(
            x=216.0,
            y=277.0,
            width=70.0,
            height=70.0
        )

        self.button_image_15 = PhotoImage(
            file= relative_to_assets("button_15.png"))
        self.button_15 = Button(
            image= self.button_image_15,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.clear(),
            relief="flat"
        )
        self.button_15.place(
            x=0.0,
            y=205.0,
            width=70.0,
            height=70.0
        )

        self.button_image_16 = PhotoImage(
            file= relative_to_assets("button_16.png"))
        self.button_16 = Button(
            image= self.button_image_16,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.append_operator('/'),
            relief="flat"
        )
        self.button_16.place(
            x=72.0,
            y=205.0,
            width=70.0,
            height=70.0
        )

        self.button_image_17 = PhotoImage(
            file= relative_to_assets("button_17.png"))
        self.button_17 = Button(
            image= self.button_image_17,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.append_operator('*'),
            relief="flat"
        )
        self.button_17.place(
            x=144.0,
            y=205.0,
            width=70.0,
            height=70.0
        )

        self.button_image_18 = PhotoImage(
            file= relative_to_assets("button_18.png"))
        self.button_18 = Button(
            image= self.button_image_18,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.show(5),
            relief="flat"
        )
        self.button_18.place(
            x=72.0,
            y=347.0,
            width=70.0,
            height=70.0
        )

        self.button_image_19 = PhotoImage(
            file= relative_to_assets("button_19.png"))
        self.button_19 = Button(
            image= self.button_image_19,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.back_space(), #backspace
            relief="flat"
        )
        self.button_19.place(
            x=216.0,
            y=205.0,
            width=70.0,
            height=70.0
        )


        self.canvas.create_text(
            81.0,
            6.0,
            anchor="nw",
            text="Jordan Python Calculator",
            fill="#FFFFFF",
            font=("Poppins ExtraLightItalic", 10 * -1)
        )
        
        self.total_expression = self.canvas.create_text(
            270.0,
            70.0,
            anchor="ne",
            text="",
            fill="#FFFFFF",
            font=("Poppins ExtraLight", 24 * -1)
        )
        
        self.current_expression = self.canvas.create_text(
            280.0,
            102.0,
            anchor="ne",
            text="0",
            fill="#FFFFFF",
            font=("Poppins ExtraLight", 64 * -1)
        )
        
        

        
        
#Methods ---------------------------------------------------------------------------          
        
    def show(self, value):          
        
        if not self.hasInput:
            self.entry_value = ""
        
        if value == ".":
            if value in self.entry_value:         
                value = ""
            else:
                if self.entry_value is "":
                    self.entry_value = "0"            
                                                          
        if value == "%":              
            value = str(float(self.entry_value) / 100)                                
            self.entry_value = value
            self.equation += self.entry_value    
            self.update_total_canvass()
            self.update_main_canvass()        
            self.entry_value = ""                                                                             
        else:
            self.entry_value += str(value) 
            self.update_main_canvass()                      
        self.hasInput = True  
        
        
        
    def clear(self):
        self.entry_value="0"
        self.equation=""
        self.hasInput = False
                
        self.update_total_canvass()
        self.update_main_canvass()
        
    def solve(self):
               
        self.equation += self.entry_value    
        self.update_total_canvass()
        print(">>>>>>>>>>>>>>"+ self.equation)
        
        try:    
            result = eval(str(self.equation))    
            self.entry_value = "" 
            self.equation = str(result)     
            print(">==============="+ self.equation)
           
             
              
        except Exception as e:
            self.equation = "Error"            
            print("EXECPTION BLOCK")
        finally:
            self.canvas.itemconfig(self.current_expression, text=self.equation)
            
               
                
    
    def append_operator(self, operator):
        self.entry_value += operator
        self.equation += self.entry_value
        self.entry_value = "" 
                
        self.update_total_canvass()
        self.update_main_canvass()
        
    def back_space(self):
        if self.hasInput:    
            self.entry_value = self.entry_value[:-1]
            
        if self.entry_value == "":
            self.entry_value = "0"
            self.hasInput = False
            
        self.canvas.itemconfig(self.current_expression, text=self.entry_value)
    
    def update_total_canvass(self):               
        self.canvas.itemconfig(self.total_expression, text=self.equation)
        
    def update_main_canvass(self):
        self.canvas.itemconfig(self.current_expression, text=self.entry_value[:11])
    
    def run(self):
        self.window.mainloop()  
    
if __name__ == "__main__":
    calc = Calculator()
    calc.run()

